(()=>{"use strict";new class{constructor(t){this.container=t,this.data=[],this.dragEl=null,this.dropTarget=null}static get markup(){return`\n      <div data-widget="${this.ctrlId.widget}">\n        ${this.createCol("Todo")}\n        ${this.createCol("In progress")}\n        ${this.createCol("Done")}\n      </div>\n    `}static createCol(t){return`\n      <div data-id="${this.ctrlId.column}">\n        <header>\n          <h3>${t}</h3>\n          <a href="#" data-id="${this.ctrlId.headerMenu}">&#x22EF;</a>\n        </header>\n        <div data-id="${this.ctrlId.cards}">\n        </div>\n        <footer>\n          <a href="#" data-id="${this.ctrlId.showForm}" data-visible="yes">+Add another card</a>\n          <form data-id="${this.ctrlId.form}" data-visible="no">\n            <textarea name="text" data-id="${this.ctrlId.newCardText}" rows="3" placeholder="Enter a title for this card" required></textarea>\n            <div>\n              <button type="submit" data-id="${this.ctrlId.addCard}">Add Card</button>\n              <button type="reset" data-id="${this.ctrlId.hideForm}">&#x274C;</button> \n              <button type="button" data-id="${this.ctrlId.footerMenu}">&#x22EF;</button>  \n            </div>          \n          </form>\n        </footer>\n      </div>\n    `}static get ctrlId(){return{widget:"trello",column:"column",headerMenu:"menu",cards:"card-list",card:"card",deleteCard:"delete-button",showForm:"add-form-show",form:"add-form",newCardText:"add-form-text",addCard:"add-button",hideForm:"add-form-hide",footerMenu:"add-form-menu"}}static get widgetSelector(){return`[data-widget=${this.ctrlId.widget}]`}static get columnSelector(){return`[data-id=${this.ctrlId.column}]`}static get headerMenuSelector(){return`[data-id=${this.ctrlId.headerMenu}]`}static get cardsSelector(){return`[data-id=${this.ctrlId.cards}]`}static get cardSelector(){return`[data-id=${this.ctrlId.card}]`}static get deleteSelector(){return`[data-id=${this.ctrlId.deleteCard}]`}static get showFormSelector(){return`[data-id=${this.ctrlId.showForm}]`}static get formSelector(){return`[data-id=${this.ctrlId.form}]`}static get newCardTextSelector(){return`[data-id=${this.ctrlId.newCardText}]`}static get addCardSelector(){return`[data-id=${this.ctrlId.addCard}]`}static get hideFormSelector(){return`[data-id=${this.ctrlId.hideForm}]`}static get footerMenuSelector(){return`[data-id=${this.ctrlId.footerMenu}]`}bindToDOM(){this.container.innerHTML=this.constructor.markup,this.widget=this.container.querySelector(this.constructor.widgetSelector),this.cols=this.widget.querySelectorAll(this.constructor.columnSelector),this.cards=[],this.showFormButtons=[],this.forms=[],this.textareas=[],this.addCardButtons=[],this.hideFormButtons=[],this.cols.forEach(((t,e)=>{this.cards.push(t.querySelector(this.constructor.cardsSelector)),this.showFormButtons.push(t.querySelector(this.constructor.showFormSelector)),this.forms.push(t.querySelector(this.constructor.formSelector)),this.textareas.push(t.querySelector(this.constructor.newCardTextSelector)),this.addCardButtons.push(t.querySelector(this.constructor.addCardSelector)),this.hideFormButtons.push(t.querySelector(this.constructor.hideFormSelector));const r=t;r.dataset.index=e,r.addEventListener("click",(e=>this.onClick(t.dataset.index,e)))})),this.widget.addEventListener("pointerdown",(t=>this.onDragStart(t))),this.widget.addEventListener("pointermove",(t=>this.onDrag(t))),this.widget.addEventListener("pointerup",(t=>this.onDragEnd(t))),this.redraw()}onClick(t,e){switch(e.target.dataset.id){case this.constructor.ctrlId.showForm:e.preventDefault(),this.showForm(t);break;case this.constructor.ctrlId.hideForm:e.preventDefault(),this.hideForm(t);break;case this.constructor.ctrlId.addCard:this.addCard(t,e);break;case this.constructor.ctrlId.deleteCard:e.preventDefault(),this.deleteCard(t,e.target.dataset.index)}}onDragStart(t){if(t.target.dataset.id!==this.constructor.ctrlId.card)return;t.preventDefault(),this.dragEl&&(this.dragEl.remove(),this.dragEl=null,this.dropTarget.remove(),this.dropTarget=null),this.dragEl=t.target.cloneNode(!0),this.dragEl.dataset.id="card-drag",this.widget.appendChild(this.dragEl);const{x:e,y:r,width:a,height:d}=t.target.getBoundingClientRect();let s;this.dragEl.style.left=`${window.scrollX+e}px`,this.dragEl.style.top=`${window.scrollY+r}px`,this.dragEl.style.width=`${a}px`,"mouse"===t.pointerType?s=t:[s]=t.changedTouches,this.deltaXDrag=e-s.pageX,this.deltaYDrag=r-s.pageY;const i=t.target.closest(this.constructor.columnSelector).dataset.index,o=t.target.querySelector("a").dataset.index;this.data[i].splice(o,1),this.dropTarget=t.target,this.dropTarget.innerHTML="",this.dropTarget.dataset.id="drop-target",this.dropTarget.style.width=`${a}px`,this.dropTarget.style.height=`${d}px`;const n=this.cards[i].querySelectorAll(this.constructor.deleteSelector);for(let t=o;t<n.length;t++)n[t].dataset.index=t;this.widget.classList.add("grabbing")}onDrag(t){if(!this.dragEl)return;let e;if(t.preventDefault(),"mouse"===t.pointerType?e=t:[e]=t.changedTouches,this.dragEl.style.left=`${window.scrollX+e.pageX+this.deltaXDrag}px`,this.dragEl.style.top=`${window.scrollY+e.pageY+this.deltaYDrag}px`,t.target.dataset.id===this.constructor.ctrlId.showForm){const e=t.target.closest(this.constructor.columnSelector).dataset.index;this.cards[e].lastElementChild!==this.dropTarget&&(this.dropTarget.remove(),this.cards[e].appendChild(this.dropTarget))}if(t.target.dataset.id!==this.constructor.ctrlId.card)return;const{y:r,height:a}=t.target.getBoundingClientRect();e.pageY<window.scrollY+r+a/2?t.target.previousElementSibling!==this.dropTarget&&(this.dropTarget.remove(),t.target.parentElement.insertBefore(this.dropTarget,t.target)):t.target.nextElementSibling!==this.dropTarget&&(this.dropTarget.remove(),t.target.parentElement.insertBefore(this.dropTarget,t.target.nextElementSibling))}onDragEnd(t){if(!this.dragEl)return;t.preventDefault(),this.widget.classList.remove("grabbing");const e=this.dropTarget.closest(this.constructor.columnSelector).dataset.index,r=this.dropTarget.previousElementSibling,a=r?+r.querySelector("a").dataset.index+1:0;this.data[e].splice(a,0,this.dragEl.querySelector("p").textContent),this.dragEl.remove(),this.dragEl=null,this.dropTarget.remove(),this.dropTarget=null,this.saveData(),this.redraw()}showForm(t){this.showFormButtons[t].dataset.visible="no",this.forms[t].dataset.visible="yes"}hideForm(t){this.textareas[t].value="",this.showFormButtons[t].dataset.visible="yes",this.forms[t].dataset.visible="no"}addCard(t,e){const r=this.textareas[t];r.value=r.value.trim(),r.value&&(e.preventDefault(),this.data[t].push(r.value),this.hideForm(t),this.saveData(),this.redraw())}deleteCard(t,e){this.data[t].splice(e,1),this.saveData(),this.redraw()}loadData(){try{this.data=JSON.parse(localStorage.getItem("data"))}catch(t){throw this.data=[[],[],[]],new Error("Invalid data")}this.data||(this.data=[[],[],[]])}saveData(){localStorage.setItem("data",JSON.stringify(this.data))}redraw(){this.loadData(),this.data.forEach(((t,e)=>{let r="";t.forEach(((t,e)=>{r+=`\n          <div data-id="${this.constructor.ctrlId.card}">\n            <p>\n              ${t}\n            </p>\n            <a href="#" data-id="${this.constructor.ctrlId.deleteCard}" data-index="${e}">&#x274C;</a>\n          </div>      \n        `})),this.cards[e].innerHTML=r}))}}(document.querySelector(".container")).bindToDOM()})();